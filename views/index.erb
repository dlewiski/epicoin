<div class="row">
  <div class="col-md-7">

    <% @blocks.reverse.each do |block| %>
    <div class="draggable block" style="left:<%=@left_position += 50%>px; top:<%=@top_position -= 150%>px;">
      <div class="block-title">
        <h1><div class="icon-my-computer"></div>Block <%= block.id%></h1>
      </div>
      <div class="block-inner">
        <p>PREVIOUS HASH: <%=block.prev_hash%></p>
        <p>OWN HASH: <%=block.own_hash%></p>
        <p>ID:<%= block.transfer%> Sent <%=block.transfer.amount%> EPICOINS to ID:<%=block.transfer.recipient_id%></p>
      </div>
      <div class="statusbar">
        <div class="left">Block <%= block.id%></div>
        <div class="right">&nbsp;</div>
      </div>
    </div>
    <%end%>

  </div>
  <div class = "col-md-5">
    <div id="terminal" class="draggable block">
      <div class="block-title">
        <div class="pull-right">
          <button class="minimize"><span class="fa fa-minus"></span></button>
          <button class="expand"><span class="fa fa-square-o"></span></button>
          <button class="times"><span class="fa fa-times"></span></button>
        </div>

        <h1><div class="icon-my-computer"></div>Console</h1>
      </div>
      <div id="terminal-inner" class="block-inner" style="background-color: #000; height: 400px; padding: 0 !important; overflow-y: scroll;">
        <script>
        var peersKeys = []
        var transfers = [];
        </script>

        <% @peers.each do |peer| %>
          <script>peersKeys.push('<%=peer.public_key[71, 15]%>');</script>
        <% end %>

        <% @transfers.each do |transfer| %>
          <script>
            transfers.push('Sender: <%transfer.sender.public_key[71, 15]%>');
            transfers.push('Recipient: <%transfer.recipient.public_key[71, 15]%>');
            transfers.push('Amount: <%transfer.amount%>');
          </script>
        <% end %>

        <script>
        // Handling post methods
        function post(path, params, method) {
          method = method || "post";

          var form = document.createElement("form");
          form.setAttribute("method", method);
          form.setAttribute("action", path);

          for(var key in params) {
            if(params.hasOwnProperty(key)) {
              var hiddenField = document.createElement("input");
              hiddenField.setAttribute("type", "hidden");
              hiddenField.setAttribute("name", key);
              hiddenField.setAttribute("value", params[key]);

              form.appendChild(hiddenField);
            }
          }
          document.body.appendChild(form);
          form.submit();
        }

          var term = new Terminal()
          term.setHeight('1000px')
          term.setWidth('100%')
          $("#terminal-inner").append(term.html)

          term.print('*****************************************')
          term.print('******** Welcome to Basechain!! *********')
          term.print('*****************************************')
          term.print('List of supported commands: ')
          term.print('(peers) - List all peers')
          term.print('(transfers) - List all transfers')
          term.print('(key) - Generate a key pair')
          term.print('(mine) - Mine a block')
          term.print('(send) - Transfer Epicoin')
          term.print('(help) - List all commands')
          term.print('*****************************************')
          for(i = 0; i < 100; i++) {
            term.input('', function (choice) {
              switch (choice) {
                case 'peers':
                {
                  var numberOfPeers = <%=@peers.length%>;
                  term.print('Number of peers: ' + numberOfPeers);
                  term.print('List of public keys: ');
                  for(i=0; i < peersKeys.length; i++) {
                    term.print((i+1) + ') ' +  peersKeys[i]);
                  }
                  break;
                }
                case 'transfers':
                {
                  var numberOfTransfers = <%=@transfers.length%>;
                  term.print('Number of transfers: ' + numberOfTransfers);
                  for (i = 0; i < transfers.length; i += 3) {
                    term.print(transfers[i]);
                    term.print(transfers[i+1]);
                    term.print(transfers[i+2]);
                  }
                  break;
                }
                case 'key':
                {
                  term.sleep(500, function () {
                    term.print('Adding a new user to the network:');
                  })
                  term.sleep(1400, function () {
                    term.print('Generating a key pair:');
                  })
                  term.sleep(2500, function () {
                    term.print('Reloading... Your key pair will be updated on the screen shortly.');
                  })
                  term.sleep(4000, function () {
                    post('/new_peer');
                  })
                  break;
                }
                case 'mine':
                {
                  term.input("Enter your public key", function (userInput) {
                    term.sleep(1000, function () {
                      term.print('Mining...');
                    })
                    term.sleep(2000, function () {
                      term.print('.');
                    })
                    term.sleep(3000, function () {
                      term.print('.');
                    })
                    term.sleep(4000, function () {
                      term.print('.');
                    })
                    term.sleep(5000, function () {
                      term.print('.');
                    })
                    term.sleep(6000, function () {
                      term.print('.');
                    })
                    term.sleep(7000, function () {
                      term.print('Block was mined');
                    })
                    term.sleep(8000, function () {
                      post('/mine', {miner_key: userInput});
                    })
                  })
                  break;
                }
                case 'send':
                {
                  term.input("Enter your public key", function (publicKey) {
                    term.input("Enter your private key", function (privateKey) {
                      term.input("Enter recipient's public key", function (recipientKey) {
                        term.input("Enter the amount", function (amount) {
                          term.sleep(1000, function () {
                            term.print('Sending...');
                          })
                          term.sleep(2000, function () {
                            post('/transaction', {sender_public: publicKey, sender_private: privateKey, recipient_public: recipientKey, amount: amount});
                          })
                        })
                      })
                    })
                  })
                  break;
                }
                case 'help':
                {
                  term.print('*****************************************')
                  term.print('List of supported commands: ')
                  term.print('(peers) - List all peers')
                  term.print('(transfers) - List all transfers')
                  term.print('(key) - Generate a key pair')
                  term.print('(mine) - Mine a block')
                  term.print('(send) - Transfer Epicoin')
                  term.print('(help) - List all commands')
                  term.print('*****************************************')
                  break;
                }
              }
            });
          }
        </script>
      </div>
    </div>
  </div>
</div>
